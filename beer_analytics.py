# -*- coding: utf-8 -*-
"""beer-analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dj3wTnRSrgMy9d3S7sPm-3hnBPG-sD-6

# Beer Consumption Analysis

## Importing libraries required in the analysis
"""

from datetime import date
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Linking google drive"""

from google.colab import drive
drive.mount('/content/drive')

cd/content/drive/"My Drive/Colab Notebooks"

"""## Importing and fine tuning the dataset

"""

#columnName = ['date','med_temp','min_temp','max_temp','precipitaion','final','consumption']
dataset = pd.read_csv("beer_data.csv", decimal=',')
dataset = dataset.iloc[1:]
print(dataset)

dataset.columns = ['date', 'med_temp', 'min_temp','max_temp', 'precipitation','isWeekend','consumption']
dataset.info()

dataset.head

dataset.shape

#Removing NaN values from the dataset
dataset = dataset.dropna()

dataset.info()

dataset['consumption'] = dataset['consumption'].astype(float) 
dataset.info()

"""## Plotting all available constraints against consumption 

"""

dataset.plot(kind='scatter', x='med_temp', y= 'consumption' )

dataset.plot(kind='scatter', x='min_temp',y='consumption')

dataset.plot(kind='scatter',x='max_temp',y='consumption')

dataset.plot(kind='scatter',x='precipitation',y='consumption')

dataset.plot(kind='scatter',x='isWeekend',y='consumption')

"""## Implimeting sklearn into dataset"""

from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

features = ['med_temp', 'precipitation','isWeekend']
X=dataset[features]
Y=dataset.consumption
X_train, X_test, Y_train, Y_test = train_test_split(X,Y, random_state =1)

model = LinearRegression()

model.fit(X_train,Y_train)

Y_predict = model.predict(X_test)

print(features, model.coef_)

model.score(X_test,Y_test)

"""## Plotting the observations"""

plt.scatter(Y_test,Y_predict)
plt.plot([Y_test.min(),Y_predict.max()],[Y_test.min(),Y_predict.max()],'k--')
plt.xlabel("Measured")
plt.ylabel("Predicted")


plt.show()